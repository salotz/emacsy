* Emacsy dev guide
my little experiments:
- code as data; make more and more things representable as
  data. buffer->list, hook->list, keymap->list etc. It is then trivial
  to save buffer and everything to a file and then later resume, but
  that's just scratching the surface of 'code as data'.
- imperative style is hard to comprehend/maintain, make everything
  functional (and "nicer") as much as possible. Reduce overall code. And
  make it pretty & schemey instead of elispy.
- Throw good errors! As much as possible all errors should be caught in
  Emacsy and be sent to the user as 'In procedure emacsy-proc1: error'
  instead of some 'In list-ref: found #f' etc. When in doubt about the
  return type throw an error instead of mixing types, don't return #f or
  '(), willy nilly.

* User's voice
A sensible advice: (don't change anything, just fix the bugs.)
- goops are useful
- better error reporting, avoid errors originating from a lower
  function, example:
> (define mul *)
> (mul 2 "h") -> ERROR: In procedure *: In procedure *: Wrong type: "h"
> (define (mul . rest)
    (if (number? (car rest))
        (* (car rest) (mul (cdr rest)))
        (error "In proc mul: please provide valid numbers")))
> (mul 2 "h") -> ERROR: In procedure scm-error: In proc mul: please provide valid numbers
* Stalled/blockers
- find a functional/schemey alternative to 'global variables', aka
  buffer-stack the main one.
